{
	"copyright":"Copyright (c) 2019 by Jonatan Gomez-Perdomo. All rights reserved. See <A HREF='https://github.com/jgomezpe/konekti'>License</A>.",
"html":"<canvas id='·id·canvas' style='position:absolute; top:0; left:0; width:100%; height:100%; border:1px solid #d3d3d3'>\n","js":"class CanvasEditor extends KonektiEditor{\n\tconstructor(dictionary){\n\t\tsuper(dictionary)\n\t\tvar id = this.id\n\t\tthis.gui = Konekti.util.vc(id+'canvas')\n\t\tif( typeof dictionary.commands != 'undefined' ) this.commands = dictionary.commands\n\t\telse this.commands = {}\n\t\tthis.wunit = 100\n\t\tif( typeof dictionary.wunit != 'undefined' ) this.wunit = dictionary.wunit\n\t\tthis.hunit = 100\n\t\tif( typeof dictionary.hunit != 'undefined' ) this.hunit = dictionary.hunit\n\t\tthis.units(this.wunit, this.hunit)\n\t}\n\n\tgetContext(){ \n//\t\tthis.gui = Konekti.util.vc('canvas'+this.id)\n\t\treturn this.gui.getContext('2d') \n\t}\n\n\tclear(){ this.getContext().strokeRect(0,0,this.gui.width,this.gui.height) }\n\n\tredraw(){\n\t\tthis.resize()\n\t\tthis.draw(this.commands) \n\t}\n\n\tresize(){\n\t\tvar used = this.commands\n\t\tvar ctx = this.getContext()\n\t\tctx.canvas.width = this.gui.offsetWidth\n\t\tctx.canvas.height = this.gui.offsetHeight\n\t\tvar wC = ctx.canvas.width \n\t\tvar hC = ctx.canvas.height \n\t\tvar wU = this.wunit \n\t\tvar hU = this.hunit\n\t\tif( wC/wU < hC/hU ) this.scale = wC/wU; else this.scale = hC/hU\n\t}\n\n\tunits(wunit, hunit){\n\t\tthis.wunit = wunit\n\t\tthis.hunit = hunit\n\t\tthis.redraw()\n\t}\n\n\t// Drawing functions \n\timage(obj){\n\t\tvar img = Konekti.util.vc(obj.id)\n\t\tif( img==undefined || img==null ){\n\t\t\timg = component.new('img', obj.id)\n\t\t\timg.src = obj.src\n\t\t\timg.alt = 'Undefined'\n\t\t}   \n     \n\t\tvar rotate\n\t\tif( obj.rotate!=undefined && obj.rotate!=null && obj.rotate!=0 ) rotate = obj.rotate\n\t\telse rotate=0\n\n\t\tvar s = this.scale\n\n\t\tvar x = obj.x * s\n\t\tvar y = obj.y * s\n\t\tvar width = obj.width * s\n\t\tvar height = obj.height * s\n\n\t\tvar ctx = this.getContext()\n\t     \n\t\tif( rotate!=0 ){\n\t\t\tctx.save()\n\t\t\tvar rx = x + width/2\n\t\t\tvar ry = y + height/2\n\t\t\tctx.translate(rx, ry)\n\t\t\tctx.rotate(rotate * Math.PI/2)\n\t\t\tctx.drawImage(img, -width/2, -height/2, width, height)\n\t\t\tctx.restore()\n\t\t}else ctx.drawImage(img, x, y, width, height)\n\t}\n\n\tcompound(obj){\n\t\tvar objs = obj.commands\n\t\tfor( var i=0; i<objs.length; i++ ) this.draw(objs[i])\n\t}\n\n\tbeginPath(obj){ this.getContext().beginPath() }\n\n\tclosePath(obj){ this.getContext().closePath() }\n\n\tmoveTo(obj){\n\t\tvar ctx = this.getContext()\n\t\tvar s = this.scale\n\t\tvar x = obj.x * s\n\t\tvar y = obj.y * s\n\t\tctx.moveTo(x,y)\n\t}\n\n\tlineTo(obj){\n\t\tvar ctx = this.getContext()\n\t\tvar s = this.scale\n\t\tvar x = obj.x * s\n\t\tvar y = obj.y * s\n\t\tctx.lineTo(x,y)\n\t}\n\n\tquadTo(obj){\n\t\tvar ctx = this.getContext()\n\t\tvar s = this.scale\n\t\tvar cp1x = obj.x[0] * s\n\t\tvar cp1y = obj.y[0] * s\n\t\tvar x = obj.x[1] * s\n\t\tvar y = obj.y[1] * s\n\t\tctx.quadraticCurveTo(cp1x, cp1y, x, y) \n\t}\n\n\tcurveTo(obj){\n\t\tvar ctx = this.getContext()\n\t\tvar s = this.scale\n\t\tvar cp1x = obj.x[0] * s\n\t\tvar cp1y = obj.y[0] * s\n\t\tvar cp2x = obj.x[1] * s\n\t\tvar cp2y = obj.y[1] * s\n\t\tvar x = obj.x[2] * s\n\t\tvar y = obj.y[2] * s\n\t\tctx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y)\n\t}\n\n\tline(obj){\n\t\tthis.beginPath(obj)\n\t\tthis.moveTo({x:obj.x[0],y:obj.y[0]})\n\t\tthis.lineTo({x:obj.x[1],y:obj.y[1]})\n\t\tthis.stroke(obj)\n\t}\n\n\tpoly(obj){\n\t\tthis.beginPath(obj)\n\t\tvar px = obj.x\n\t\tvar py = obj.y\n\t\tthis.moveTo({x:px[0],y:py[0]})\n\t\tfor( var i=1; i<px.length; i++) this.lineTo({x:px[i],y:py[i]})\n\t}\n\n\tpolyline(obj){\n\t\tthis.poly(obj)\n\t\tthis.stroke(obj)\n\t}\n\n\tpolygon(obj){\n\t\tthis.poly(obj)\n\t\tthis.fill(obj)\n\t}\n\n\tstyle(obj){\n\t\tvar canvas = Konekti.plugin.canvas\n\t\tif( obj.color != null )\treturn canvas.rgb(obj.color)\n\t\tif( obj.startcolor == null ) return null\n\t\tvar c1 = canvas.rgb(obj.startcolor)\n\t\tvar c2 = canvas.rgb(obj.endcolor)\n\t\tvar s = this.scale\n\t\tvar ctx = this.getContext()\n\t\tvar gradient\n\t\tif( obj.r != null ){\n\t\t\tvar r = obj.r * s\n\t\t\tvar x = obj.x * s\n\t\t\tvar y = obj.y * s\n\t\t\tgradient = ctx.createRadialGradient(x, y, 1, x, y, r)\n\t\t}else{\n\t\t\tvar x1 = obj.x[0] * s\n\t\t\tvar y1 = obj.y[0] * s\n\t\t\tvar x2 = obj.x[1] * s\n\t\t\tvar y2 = obj.y[1] * s\n\t\t\tgradient = ctx.createLinearGradient(x1, y1, x2, y2)\n\t\t}\n\t\tgradient.addColorStop(\"0\", c1)\n\t\tgradient.addColorStop(\"1\", c2)\n\t\treturn gradient\n\t}\n\n\tstrokeStyle(obj){\n\t\tvar ctx = this.getContext() \n\t\tctx.strokeStyle = this.style(obj)\n\t\tif( obj.lineWidth != null ) ctx.lineWidth = obj.lineWidth\n\t}\n\n\tfillStyle(obj){\n\t\tvar ctx = this.getContext()\n\t\tctx.fillStyle = this.style(obj)\n\t}\n\n\tstroke(obj){ this.getContext().stroke() }\n\n\tfill(obj){\n\t\tvar ctx = this.getContext()\n\t\tctx.closePath()\n\t\tctx.fill()\n\t}\n\n\tdraw(obj){\n\t\tvar type = obj.command\n\t\tif( type != null ) this[type](obj)\n\t}\n\n\tgetText(){ return JSON.stringify(commands) }\n\n\tsetText(txt){ \n\t\tthis.commands = JSON.parse(txt)\n\t\tthis.redraw()\n\t}\n}\n\n// Canvas functions\nKonekti.plugin.canvas.client = {}\n\nKonekti.plugin.canvas.rgb = function( obj ){ return \"rgb(\"+obj.red+\",\"+obj.green+\",\"+obj.blue+\")\"; }\n\nKonekti.plugin.canvas.resize = function () {\n\tvar canvas = Konekti.plugin.canvas\n\tfor (var cc in canvas.client){\n\t\tcanvas.client[cc].redraw()\n\t}\n}\n\t\nKonekti.plugin.canvas.connect = function ( dictionary ){\n\tKonekti.client[dictionary.client].editor(new CanvasEditor( dictionary))\n} \n\t\nwindow.addEventListener(\"resize\", Konekti.plugin.canvas.resize);\n\n"}
