{"copyright":"Copyright (c) 2019 by Jonatan Gomez-Perdomo. All rights reserved. See <A HREF='https://github.com/jgomezpe/konekti'>License</A>.",
"html":"<div id='路id路' style='position:relative; width:100%; padding-bottom:56.25%; height:0' >\n <div id='路id路-ace' style='position:relative; width:100%; padding-bottom:56.25%' ></div>\n</div>","js":"// Editor functions\nKonekti.plugin.editor.done = function (){\n\tKonekti.plugin.editor.loaded = true\n\twhile( Konekti.plugin.editor.view.length > 0 ){\n\t\tvar dictionary = Konekti.plugin.editor.view[0]\n\t\tKonekti.plugin.editor.view.shift()\n\t\tKonekti.plugin.editor.connect( dictionary )\n\t}\n}\n\t\nKonekti.plugin.editor.loaded = false\n\t\nKonekti.script.loadJS(\"https://ace.c9.io/build/src/ace.js\", Konekti.plugin.editor.done)\n\nKonekti.plugin.editor.view = []\n\nKonekti.plugin.editor.ace_define = function ( lang ){\n\tvar id = lang.mode;\n\tace.define(\n\t\t\"ace/mode/\"+lang.mode+\"_highlight_rules\",\n\t\t[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], \n\t\tfunction(require, exports, module) {\n\t\t\t\"use strict\";\n\n\t\t\tvar oop = require(\"../lib/oop\");\n\t\t\tvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n\t\t\tvar EditorHighlightRules = function() {\n\t\t\t\tthis.$rules = lang.tokens;\n\t\t\t\tthis.normalizeRules();\n\t\t\t};\n\n\t\t\tEditorHighlightRules.metaData = {\n\t\t\t\tfileTypes: lang.fileTypes,\n      \t\t\tfoldingStartMarker: '(%\\\\s*region \\\\w*)|([a-z]\\\\w*.*:- ?)',\n\t\t\t\tfoldingStopMarker: '(%\\\\s*end(\\\\s*region)?)|(?=\\\\.)',\n\t\t\t\tkeyEquivalent: '^~P',\n\t\t\t\tname: lang.qName,\n\t\t\t\tscopeName: 'source.'+lang.mode\n\t\t\t};\n\n\n\t\toop.inherits(EditorHighlightRules, TextHighlightRules);\n\n\t\texports.EditorHighlightRules = EditorHighlightRules;\n\t\t}\n\t);\n\n\tace.define(\n\t\t\"ace/mode/folding/cstyle\",\n\t\t[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], \n\t\tfunction(require, exports, module) {\n\t\t\t\"use strict\";\n\n\t\t\tvar oop = require(\"../../lib/oop\");\n\t\t\tvar Range = require(\"../../range\").Range;\n\t\t\tvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\n\t\t\tvar FoldMode = exports.FoldMode = function(commentRegex) {\n\t\t\t\tif (commentRegex) {\n\t\t\t\t\tthis.foldingStartMarker = new RegExp( this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start) );\n\t        \t\t\tthis.foldingStopMarker = new RegExp( this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end) );\n\t\t\t\t}\n\t\t\t};\n\t\t\toop.inherits(FoldMode, BaseFoldMode);\n\n\t\t\t(function() {\n    \t\n\t\t\t\tthis.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n\t\t\t\tthis.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n\t\t\t\tthis.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n\t\t\t\tthis.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n\t\t\t\tthis.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n\t\t\t\tthis._getFoldWidgetBase = this.getFoldWidget;\n\t\t\t\tthis.getFoldWidget = function(session, foldStyle, row){\n\t\t\t\t\tvar line = session.getLine(row);\n    \t\n\t\t\t\t\tif (this.singleLineBlockCommentRe.test(line)) { if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\"; }\n    \n\t\t\t\t\tvar fw = this._getFoldWidgetBase(session, foldStyle, row);\n\t    \n\t\t\t\t\tif (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\t\n\t\t\t\t\treturn fw;\n\t\t\t\t};\n\n\t\t\t\tthis.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n\t\t\t\t\tvar line = session.getLine(row);\n        \n\t\t\t\t\tif (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n        \n\t\t\t\t\tvar match = line.match(this.foldingStartMarker);\n\t\t\t\t\tif (match) {\n\t\t\t\t\t\tvar i = match.index;\n\n\t\t\t\t\t\tif (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n                \n\t\t\t\t\t\tvar range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n\t\t\t\t\t\tif (range && !range.isMultiLine()){ \n\t\t\t\t\t\t\tif (forceMultiline) { range = this.getSectionRange(session, row); }\n\t\t\t\t\t\t\telse if (foldStyle != \"all\") range = null;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn range;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (foldStyle === \"markbegin\") return;\n\n\t\t\t\t\tvar match = line.match(this.foldingStopMarker);\n\t\t\t\t        if (match) {\n\t\t\t\t\t\t\tvar i = match.index + match[0].length;\n\n\t\t\t\t\t\t\tif (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n\t\n\t\t\t\t\t\t\treturn session.getCommentFoldRange(row, i, -1);\n\t\t\t\t\t}\n\t\t\t\t};\n    \t\n\t\t\t\tthis.getSectionRange = function(session, row) {\n\t\t\t\t\tvar line = session.getLine(row);\n\t\t\t\t\tvar startIndent = line.search(/\\S/);\n\t\t\t\t\tvar startRow = row;\n\t\t\t\t\tvar startColumn = line.length;\n\t\t\t\t\trow = row + 1;\n\t\t\t\t\tvar endRow = row;\n\t\t\t\t\tvar maxRow = session.getLength();\n\t\t\t\t\twhile (++row < maxRow) {\n\t\t\t\t\t\tline = session.getLine(row);\n\t\t\t\t\t\tvar indent = line.search(/\\S/);\n\t\t\t\t\t\tif (indent === -1) continue;\n\t\t\t\t\t\tif  (startIndent > indent) break;\n\t\t\t\t\t\tvar subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n\t\t\t\t\t\tif (subRange) {\n\t\t\t\t\t\t\tif (subRange.start.row <= startRow) { break; }\n\t\t\t\t\t\t\telse if (subRange.isMultiLine()) { row = subRange.end.row; } \n\t\t\t\t\t\t\t\t else if (startIndent == indent) { break; }\n\t\t\t\t\t\t}\n\t\t\t\t\t\tendRow = row;\n\t\t\t        }\n        \n\t\t\t\t\treturn new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n\t\t\t\t};\n\t\n\t\t\t\tthis.getCommentRegionBlock = function(session, line, row) {\n\t\t\t\t\tvar startColumn = line.search(/\\s*$/);\n\t\t\t\t\tvar maxRow = session.getLength();\n\t\t\t\t\tvar startRow = row;\n        \t\n\t\t\t\t\tvar re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n\t\t\t\t\tvar depth = 1;\n\t\t\t\t\twhile (++row < maxRow) {\n\t\t\t\t\t\tline = session.getLine(row);\n\t\t\t\t\t\tvar m = re.exec(line);\n\t\t\t\t\t\tif (!m) continue;\n\t\t\t\t\t\tif (m[1]) depth--;\n\t\t\t\t\t\telse depth++;\n\t\t\t\t\t\tif (!depth) break;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar endRow = row;\n\t\t\t\t\tif (endRow > startRow) { return new Range(startRow, startColumn, endRow, line.length); }\n\t\t\t\t};\n\n\t\t\t}).call(FoldMode.prototype);\n\n\t\t}\n\t);\n\n\tace.define(\n\t\t\"ace/mode/\"+id,\n\t\t[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/\"+id+\"_highlight_rules\",\"ace/mode/folding/cstyle\"],\n\t\tfunction(require, exports, module) {\n\t\t\t\"use strict\";\n\n\t\t\tvar oop = require(\"../lib/oop\");\n\t\t\tvar TextMode = require(\"./text\").Mode;\n\t\t\tvar EditorHighlightRules = require(\"./\"+id+\"_highlight_rules\").EditorHighlightRules;\n\t\t\tvar FoldMode = require(\"./folding/cstyle\").FoldMode;\n\n\t\t\tvar Mode = function() {\n\t\t\t\tthis.HighlightRules = EditorHighlightRules;\n\t\t\t\tthis.foldingRules = new FoldMode();\n\t\t\t\tthis.$behaviour = this.$defaultBehaviour;\n\t\t\t};\n\t\t\toop.inherits(Mode, TextMode);\n\n\t\t\t(function() {\n\t\t\t\tthis.lineCommentStart = \"%\";\n\t\t\t\tthis.blockComment = {start: \"/*\", end: \"*/\"};\n\t\t\t\tthis.$id = \"ace/mode/\"+id;\n\t\t\t}).call(Mode.prototype);\n\n\t\t\texports.Mode = Mode;\n\t\t}\n\t);\n}\n\nKonekti.plugin.editor.connect = function ( dictionary ){\n\tif( Konekti.plugin.editor.loaded ){\n\t\tvar id = dictionary.id\n\t\tif( dictionary.code != null ){\n\t\t\tdictionary.code.cid = id\n\t\t\tKonekti.plugin.editor.ace_define(dictionary.code)\n\t\t} \n\t\t\n\t\tvar e = ace.edit(id+'-ace');\n\t\te.setFontSize(\"16px\")\n\t\tif(typeof dictionary.initial != 'undefined'){\n\t\t    var ui = Konekti.util.vc(dictionary.id)\n\t\t    ui.setAttribute('initial', dictionary.initial)\n\t\t    e.setValue(dictionary.initial,1)\n\t\t} \n\t\t\n\t\te.session.setMode(\"ace/mode/\"+dictionary.mode);\n\t\tif( dictionary.theme!=null) e.setTheme(\"ace/theme/\"+dictionary.theme);\n\t\te.setShowPrintMargin(false);\n\t\tif(dictionary.client!=null){\n\t\t\tvar client = Konekti.server.client[dictionary.client]\n\n            e.session.on(\"changeAnnotation\", function () {\n                var annot = e.session.getAnnotations();\n                client.annotation(id, annot)                \n            });\t\n            \n\t\t    \n\t\t\tif(typeof dictionary.onchange == 'boolean' && dictionary.onchange)\n\t\t\t    e.session.on('change', function(){ client.onchange(id) })\n\t\t\tclient.editor( id, function(){ return Konekti.plugin.editor.getText(id) }, \n\t\t\t    function(txt){ Konekti.plugin.editor.setText(id,txt) },\n\t\t\t    function(pos){ Konekti.plugin.editor.scrollTop(id,pos) }\n\t\t\t)\n\t\t}\n\t}else Konekti.plugin.editor.view.push( dictionary )\n}\n\t\n\nKonekti.plugin.editor.load = function ( id ){ \n\tKonekti.plugin.editor.view.push( id )\n\tif( Konekti.plugin.editor.loaded ) Konekti.plugin.editor.done();\n}\n\nKonekti.plugin.editor.scrollTop = function ( id, pos ){\n\tvar edit = ace.edit(id+'-ace');\n\tvar ui = Konekti.util.vc(id+'-ace')\n\tvar sbui = ui.getElementsByClassName('ace_scrollbar-v')[0].getElementsByClassName('ace_scrollbar-inner')[0]\n\tvar tout\n\tfunction check(){\n\t    var h = parseInt(sbui.style.height, 10)\n\t    var fs = parseInt(ui.style.fontSize,10)\n\t    var tlines = h/fs\n\t    if(tlines != edit.session.getLength() ) tout = setTimeout(check,100)\n        else{\n        \tif(typeof pos=='undefined') pos = h\n        \tvar line = Math.floor(pos/fs)\n            edit.scrollToLine(line, true, true, function () {});\n            edit.gotoLine(line, 0, true);\n            clearTimeout(tout)\n        }\n\t}\n\tcheck()\n}\n\t\nKonekti.plugin.editor.setText = function ( id, txt ){\n\tvar edit = ace.edit(id+'-ace');\n\tedit.setValue(txt, 1);\n}\n\t\nKonekti.plugin.editor.getText = function ( id ){\n\tvar edit = ace.edit(id+'-ace');\n\treturn edit.getValue();\n}\n\nKonekti.plugin.editor.locateCursor = function ( id, row, column ){\n\tvar edit = ace.edit(id+'-ace');\n\tedit.moveCursorTo(row, column);\n\tedit.focus();\n}\n\t\nKonekti.plugin.editor.highlight = function (id, row ){ Konekti.plugin.editor.locateCursor( id+'-ace', row,1 ); }\n"}
